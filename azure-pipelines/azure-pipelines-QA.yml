trigger: none

pool:
  name: Default   # self-hosted agent called “test_agent”

variables:
  workingDirectory: environments/QA
  serviceConnection: dhdp-infra-sc
  backendResourceGroup: dhdp-qat-resource-group
  backendStorageAccount: dhdplabsa
  backendContainerName: tfstate
  backendKey: qa.terraform.tfstate

stages:
# ─────────────────────────────────── LINT ────────────────────────────────────
  - stage: Lint
    displayName: Terraform Lint
    jobs:
      - job: Lint
        displayName: Lint Terraform Code
        steps:
          - checkout: self
            persistCredentials: true

          - task: PowerShell@2
            displayName: Install and run TFLint
            inputs:
              targetType: inline
              script: |
                tflint --init
                if (-not $?) {
                  Write-Warning "⚠️  TFLint init failed, but continuing."
                }

                tflint --chdir=$(workingDirectory)
                if (-not $?) {
                  Write-Warning "⚠️  TFLint warnings detected, but continuing."
                }

# ─────────────────────────────────── SCAN ────────────────────────────────────
  - stage: Scan
    displayName: Terraform Security Scan
    dependsOn: Lint
    jobs:
      - job: Scan
        displayName: Checkov Terraform Scan
        steps:
          - checkout: self

          # Install Checkov with pip from the pre-installed Python
          - task: PowerShell@2
            displayName: Install Checkov
            inputs:
              targetType: inline
              script: |
                # Prepend Python 3.13 to PATH for this session
                $env:Path = "C:\Program Files\Python313\Scripts;C:\Program Files\Python313;" + $env:Path
                Write-Host "Installing Checkov..."
                python -m pip install --disable-pip-version-check --no-cache-dir --upgrade checkov

          # Run Checkov and produce SARIF
          - task: PowerShell@2
            displayName: Run Checkov with SARIF Output
            inputs:
              targetType: inline
              script: |
                $env:Path = "C:\Program Files\Python313\Scripts;C:\Program Files\Python313;" + $env:Path
                Write-Host "Running Checkov scan..."
                python -m checkov -d $(workingDirectory) `
                  -o sarif --output-file-path checkov-report.sarif `
                  || Write-Warning "Checkov completed with findings"

          # Publish the SARIF report as a build artifact
          - task: PublishBuildArtifacts@1
            displayName: Publish Checkov SARIF Report
            inputs:
              PathtoPublish: checkov-report.sarif
              ArtifactName: CheckovReport
              publishLocation: Container

# ─────────────────────────────────── INIT ────────────────────────────────────
  - stage: Init
    displayName: Terraform Init
    dependsOn: Scan
    jobs:
      - job: Init
        displayName: Terraform Initialization
        steps:
          - checkout: self
            persistCredentials: true

          - script: |
              rd /s /q .terraform
              del /q .terraform.lock.hcl 2>NUL
            displayName: Clean .terraform and lockfile

          - script: |
              echo "##vso[task.setvariable variable=ARM_USE_OIDC]true"
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(servicePrincipalId)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            displayName: Set OIDC Auth Variables

          - task: TerraformInstaller@1
            displayName: Install Terraform 1.5.7
            inputs:
              terraformVersion: 1.5.7

          - script: terraform -version
            displayName: Show Terraform Version

          - task: TerraformTaskV4@4
            displayName: Terraform Init
            inputs:
              provider: azurerm
              command: init
              workingDirectory: $(workingDirectory)
              backendServiceArm: $(serviceConnection)
              backendAzureRmResourceGroupName: $(backendResourceGroup)
              backendAzureRmStorageAccountName: $(backendStorageAccount)
              backendAzureRmContainerName: $(backendContainerName)
              backendAzureRmKey: $(backendKey)
              backendAzureRmUseOIDC: true
              useTerraformVersion: 1.5.7
