trigger: none

pool:
  name: Default

variables:
  workingDirectory: 'environments/QA'
  serviceConnection: 'dhdp-infra-sc'
  backendResourceGroup: 'dhdp-qat-resource-group'
  backendStorageAccount: 'dhdplabsa'
  backendContainerName: 'tfstate'
  backendKey: 'qa.terraform.tfstate'

stages:
  - stage: Lint
    displayName: 'Terraform Lint'
    jobs:
      - job: Lint
        displayName: 'Lint Terraform Code'
        steps:
          - checkout: self
            persistCredentials: true
- task: PowerShell@2
  displayName: 'Install and Run TFLint on Windows'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Installing tflint..."
      Invoke-WebRequest -Uri "https://github.com/terraform-linters/tflint/releases/download/v0.50.3/tflint_windows_amd64.zip" -OutFile "tflint.zip"
      Expand-Archive -Path "tflint.zip" -DestinationPath "."
      $env:Path += ";$(System.DefaultWorkingDirectory)"
      .\tflint --init
      .\tflint --chdir=$(workingDirectory) || Write-Host "⚠️ TFLint warnings detected, but not failing the pipeline."


#          - script: |
              #echo "Installing tflint..."
#              Invoke-WebRequest -Uri "https://github.com/terraform-linters/tflint/releases/download/v0.50.3/tflint_windows_amd64.zip" -OutFile "tflint.zip"
              #curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
#              Expand-Archive -Path "tflint.zip" -DestinationPath "."
#              $env:Path += ";$(System.DefaultWorkingDirectory)"
#              .\tflint --init
 #             .\tflint --chdir=$(workingDirectory)
               #tflint --init
              #tflint --chdir=$(workingDirectory) || echo "⚠️ TFLint warnings detected, but not failing the pipeline."
 #           displayName: 'Run tflint'

  - stage: Scan
    displayName: 'Terraform Security Scan'
    dependsOn: Lint
    jobs:
      - job: Scan
        displayName: 'Checkov Terraform Scan'
        steps:
          - checkout: self

          - script: |
              echo "Installing Checkov..."
              pip install checkov
            displayName: 'Install Checkov'

          - script: |
              echo "Running Checkov scan..."
              checkov -d $(workingDirectory) -o sarif --output-file-path checkov-report.sarif || echo "Checkov completed with findings"
            displayName: 'Run Checkov with SARIF Output'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Checkov SARIF Report'
            inputs:
              PathtoPublish: 'checkov-report.sarif'
              ArtifactName: 'CheckovReport'
              publishLocation: 'Container'

  - stage: Init
    displayName: 'Terraform Init'
    dependsOn: Scan
    jobs:
      - job: Init
        displayName: 'Terraform Initialization'
        steps:
          - checkout: self
            persistCredentials: true

          - script: |
              rm -rf .terraform
              rm -f .terraform.lock.hcl
            displayName: 'Clean .terraform and lockfile'

          - script: |
              echo "##vso[task.setvariable variable=ARM_USE_OIDC]true"
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(servicePrincipalId)"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantId)"
              echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionId)"
            displayName: 'Set OIDC Auth Variables'

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.5.7'

          - script: terraform -version
            displayName: 'Show Terraform Version'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(workingDirectory)'
              backendServiceArm: '$(serviceConnection)'  # ✅ Required for backend
              backendAzureRmResourceGroupName: '$(backendResourceGroup)'
              backendAzureRmStorageAccountName: '$(backendStorageAccount)'
              backendAzureRmContainerName: '$(backendContainerName)'
              backendAzureRmKey: '$(backendKey)'
              backendAzureRmUseOIDC: true
              useTerraformVersion: '1.5.7'
